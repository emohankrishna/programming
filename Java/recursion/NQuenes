package recursion
public class NQuenes {
    private static int[][] board={
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0},
            };
    private static final int N = 8;
    private static boolean isValidMove(int row,int col){
        if((row < 0 && row >= N) || (col < 0 && col >= N)) return false;
        for(int i=row;i>=0;i--){
            if(board[i][col] != 0) return false;
        }
        for (int i = row,j = col; i >=0 && j >=0; i--,j--) {
            if(board[i][j] != 0) return false;
        }
        for (int i = row,j = col; i >=0 && j < N; i--,j++) {
            if(board[i][j] != 0) return false;
        }
        return true;
    }
    public static void printNQ(){
        for (int i = 0; i <N ; i++) {
            for (int j = 0; j <N ; j++) {
                System.out.print(board[i][j]+" ");
            }
            System.out.println();
        }
    }
    public static boolean solve(int row){
        if(row == N) return true;
        for (int i = 0; i < N; i++) {
            /* Check if the queen can be placed on
               board[i][col] */
            if (isValidMove( row, i)) {
                /* Place this queen in board[i][col] */
                board[row][i] = 1;

                /* recur to place rest of the queens */
                if (solve(row + 1))
                    return true;

                /* If placing queen in board[i][col]
                   doesn't lead to a solution then
                   remove queen from board[i][col] */
                board[row][i] = 0; // BACKTRACK
            }
        }
        return false;
    }
    public static void main(String[] args) {
//        board[0][] =1;
        if(solve(0)){
            printNQ();
        } else {
            System.out.println("cannot Solve");
        }
    }
}
